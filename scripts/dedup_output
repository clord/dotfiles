#!/usr/bin/env ruby
require 'digest/sha1'
require 'pathname'
require 'sqlite3'
require 'fileutils'
require 'optparse'
require 'base64'
include FileUtils

options = {}
OptionParser.new do |opts|
    opts.banner = "Usage: dedup_output [options]"
    opts.on("-k", "--[no-]-keep", "print the file that will be kept with 'keep:' prefix") do |v|
        options[:keep] = v
    end
    opts.on("-d", "--[no-]-delete", "delete all but the best filepath") do |v|
        options[:delete] = v
    end
end.parse!

db = nil
if File.exist? "#{ENV['HOME']}/tmp/dedup_files.db"
   db = SQLite3::Database.new("#{ENV['HOME']}/tmp/dedup_files.db")
else
   STDERR.puts "no database"
   exit 1
end

def compare_it a
    is_audiobook = a.match(/Audiobooks/)
    is_drm_stripped = a.match(/DRM_STRIPPED/)
    [is_audiobook ? -1 : 1, is_drm_stripped ? 1 : -1, -1 * a.count("/"), a.length, a]
end

# Now we can query for exact matches, which will go to stdout
db.execute("SELECT full_digest FROM files WHERE full_digest IS NOT null GROUP BY full_digest HAVING count(full_digest) > 1 ").each do |row|
  dups = db.execute("SELECT path FROM files WHERE full_digest = ?", row[0]).map do |f|
      f[0]
  end
  sorted = dups.sort {|a,b| compare_it(a) <=> compare_it(b) }
  keeper = sorted.delete_at(0)

  if options[:keep]
    puts "keep: #{keeper}"
  end
  sorted.each do |duplicate|
      if options[:delete] && File.exist?(duplicate)
          begin
            File.delete(duplicate)
            puts duplicate
          rescue Exception => e
              STDERR.puts "error: #{duplicate}\n   => #{e.message}"
          end
      else
        puts duplicate
      end
  end
end

