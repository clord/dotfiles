#!/bin/env ruby

require 'lib/cmvc'
require 'ostruct'
require 'optparse'

opt = OpenStruct.new
opt.mode = :makeitso
opt.assign_to = "clord"
opt.severity = 3
opt.prefixes = []

# Script is named open-<comp>-<defect/feature>
scriptname = File.basename($0).split /-/
if scriptname.count == 3
   comp = scriptname[1]
   case comp
      when "wcode"
         opt.prefixes << "WCODE"
         opt.severity = 2
         opt.product = "OTHER"
   end
end
opts = OptionParser.new do |opts|
   opts.banner = "Usage: #{File.basename($0)} [options]"
   opts.on("--dryrun", "only print commands that will be executed") { opt.mode = :dryrun }
   opts.on("--abstract=ABS", String) {|a| opt.abstract = a }
   opts.on("--severity=S", Integer) {|a| opt.severity = a }
   opts.on("--assign=TO", String) {|a| opt.assign_to = a }
   opts.on("--product=P", String) {|a| opt.product = a }
   opts.on("--component=C", String) {|a| opt.component = a }
   opts.on("--remarks=REM", String) {|a| opt.remarks = a }
   opts.on("--release=REL", String, "List of releases to open tracks for (first is rel)") {|a| opt.releases = a.split /\s*,\s*/ }
end.parse!

if opt.mode == :makeitso
   raise "failed to log in" unless system "ibmlogin"
end


defect_hash = { abstract: Cmvc::prefix(opt.prefixes, opt.abstract),
                 remarks: opt.remarks,
                 release: opt.releases.first,
               component: opt.component,
                severity: opt.severity,
                 product: opt.product }

Cmvc::Context.open(:defect, defect_hash, opt.mode).
              assign(opt.assign_to).
              accept(opt.remarks).
              create_tracks(opt.releases)


