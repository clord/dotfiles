#!/usr/bin/env ruby
# You must trust your sysadmin and sudoers with your passwords
# in order to use this script safely, assuming permissions are set
# correctly.

require 'yaml'
ENV['HOME'] ||= "/home/clord"
F_PWD = "#{ENV['HOME']}/.passwords"
system "chmod u=rw,go= #{F_PWD}" # Make sure permissions are good
if ARGV.count == 2
   arg = ARGV[0]
   section = ARGV[1]
elsif ARGV.count == 1
   section = ARGV[0]
else
   raise "Must supply arguments"
end

def readpw(prompt="Password")
   STDOUT.print "#{prompt}: "
   system "stty -echo"
   inp = STDIN.gets
   raise "Password required" unless inp
   inp.chomp.strip
ensure
   system "stty echo"
end

# Will prompt for username/password, and return a hash
# containing the information
def addpw
   h = {}
   STDOUT.print "Username: "
   h["username"] = STDIN.gets.strip
   h["password"] = readpw
   h
end


pws = YAML::load_file F_PWD
raise "password file unparsable" unless pws
case arg
when "-user"
   pwd = pws[section]
   raise "can't find anything for #{section}" unless pwd
   print pwd["username"]
when "-pass"
   pwd = pws[section]
   raise "can't find anything for #{section}" unless pwd
   print pwd["password"]
when "-add"
   STDOUT.print "Section: "
   rec = STDIN.gets.strip
   raise "Already exists" if pws[rec]
   pws[rec].merge addpw
   File.open(F_PWD, "w") { |out| YAML::dump(pws, out) }
when "-chpass"
   pwd = pws[section]
   raise "can't find anything for #{section}" unless pwd
   pwd["password"] = readpw "New Password"
   pws[section] = pwd
   File.open(F_PWD, "w") { |out| YAML::dump(pws, out) }
   print pwd["password"]
else
   YAML::dump({section => pws[section]}, STDOUT) if section
end

