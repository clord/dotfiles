#!/usr/bin/env ruby

require 'lib/cmvc'
require 'ostruct'
require 'optparse'

opt = OpenStruct.new
opt.mode = :makeitso
opt.tool = :defect
opt.family = ENV['CMVC_FAMILY']
opt.become = ENV['CMVC_BECOME']
opt.releases = [ENV['CMVC_RELEASE']]
opt.to = ENV['USER']
ENV['CMVC_AUTH_METHOD'] ||= 'PW'

scriptname = File.basename($0)

opts = OptionParser.new do |opts|
   opts.banner = "Usage: #{File.basename($0)} [options]"
   opts.on("--dryrun", "only print commands that will be executed") { opt.mode = :dryrun }
   opts.on("--undo", "If possible, restore to fix state") { opt.undo = true}
   opts.on("--family=FAM", String, "the CMVC_FAMILY") {|a| opt.family = a }
   opts.on("--become=BEC", String, "become another user") {|a| opt.become = a }
   opts.on("--to=TO", String, "who will fix") {|a| opt.to = a }
   opts.on("--defect=N", String, "use the defect commands") {|a| opt.name = a; opt.tool = :defect }
   opts.on("--feature=N", String, "use the feature commands") {|a| opt.name = a; opt.tool = :feature }
   opts.on("--release=REL", String, "List of releases to integrate") {|a| opt.releases = a.split /\s*,\s*/ }
end.parse!

if opt.mode == :makeitso
   raise "failed to log in" unless system "ibmlogin"
end

ctx = Cmvc::Context.new(opt.name, opt.tool, opt.mode)

if opt.undo
   ctx.track_view(opt.releases) do |r, tname, empty, state|
      ctx.track_fix(r) unless state == "fix"
   end
end

ctx.fix_view(opt.releases) do |name, r, component, fstate, fix_owner|
   if opt.undo
      if fstate != "active"
         ctx.activate_fix component.to_sym, r
      end
   end

   if fix_owner != opt.to
      ctx.assign_fix opt.to, component.to_sym, r
   end

   unless opt.undo
      if fstate != "complete"
         ctx.complete_fix component.to_sym, r
      end
   end
end

unless opt.undo
   ctx.track_view(opt.releases) do |r, tname, empty, state|
      next if state == "integrate"
      ctx.track_integrate(r)
      ctx.track_fix(r) unless state == "fix"
   end
end
