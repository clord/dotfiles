#!/usr/bin/env ruby

require 'lib/cmvc'
require 'ostruct'
require 'optparse'

def normalize_release rel
   /^(\w+)\.((?:\.\d+)+|.\w+)$/.match rel
   return $1
end

# returns an array [modified+created, unmodified]
def changes map_old, map_new

end

opt = OpenStruct.new
opt.user = ENV['USER']
opt.rel = ENV['CMVC_RELEASE']
$mode = :makeitso
opt.temp = "/tmp"
opt.repo = "/home/#{opt.user}/repositories/#{normalize_release opt.release}.git"

ENV['CMVC_AUTH_METHOD'] ||= "PW"


opts = OptionParser.new do |opts|
   ## Parse options
end

if $mode == :makeitso
   raise "failed to log in" unless system "ibmlogin"
else
   raise "dryrun not yet implemented"
end



# Need a list of modified files (and unmodified files), given two release maps

# in opt.temp,
#   - clone opt.repo (with -n)
#   - check out .gitignore from git
#   - check out unmodified files from git
#   - check out modified or created files from CMVC
#   - commit changes to master
#   - push branch to opt.repo

# ideally, we'd break down changed files by track
# which is to say, partition changes by track, create a branch for each, commit the changes to git


# Get the latest cmvc level for a release
def cmvc_level release
   ctx = Cmvc::Context.new(nil, nil, $mode)
   level = nil
   ctx.last_levels(release, 1) do |levels|
      level = levels.first.first
   end.exec
   return level
end

# Get the latest level checked into git
def git_level
   # Assumes PWD is a valid git repo
   return nil unless File.exists? ".git/current_cmvc_level"
   return File.read(".git/current_cmvc_level").chomp
end

def git_checkout branch
   system "git checkout #{branch}"
   raise "checkout failed" unless $?
end

# Tag the current branch/repo with the specified tag
def git_tag tag
   system "git tag #{tag}"
   raise "tag failed" unless $?
end

def git_merge_ours_no_commit release
   system "git merge -s ours #{release}"
   raise "failed to merge" unless $?
end

# commit all additions, deletions, etc.
def git_commit_all message
   system "git add --all ."
   return false unless $?
   system "git commit -q -m '#{message.gsub(/'/, "\'")}'"
   return $?
end

def git_push
   system "git push"
   raise "failed to push" unless $?
end

def purify_git_repo
   # Nuke everything except .git*
   Dir.glob('*', File::FNM_DOTMATCH).each do |f|
      unless f.split('/').last =~ /(^\.git.*|\/\.?\.$)/
         rm_rf f
      end
   end
end

# Given an rmap, extract the changed or created files, and delete any deleted files
def cmvc_extract_changed rmap

   raise "oops, not done"
end


def cmvc_release_map release

   raise "oops, not done"
end

def cmvc_level_map release

   raise "oops, not done"
end

def cmvc_latest_level_extract
   # Do a regular level extract
   raise "oops, not done"
end

# Clone the main repository
def git_clone_main
   raise "oops, not done"
end

# Stick the rmap onto disk
def write_rmap rmap

end

# Not quite ready yet
throw "not ready for prime-time"

# Change to our working directory
cd opt.temp

# Clone the master repository, and change to the directory it was cloned to
cd git_clone_main


cvl = cmvc_level opt.rel
gtl = git_level

# new level since current level
if cvl && cvl != gvl

   # checkout latest level
   git_checkout "integrated"

   # merge (-s ours) latest dev branch, if any.
   # -s ours will avoid any actual merging, because
   # we don't want merge conflicts, and we are about
   # to wipe everything out anyway. This let's us trace
   # the history of a change back into the dev branch
   # from a level.
   git_merge_ours_no_commit opt.rel

   # wipe out working directory, preserving .git*
   purify_git_repo

   # cmvc level extract the latest level
   cmvc_latest_level_extract cvl

   # commit to git as new latest level
   message = "Level #{cvl}"
   git_commit_all message

   git_tag cvl

end


# switch to dev branch
git_checkout opt.rel

# grab the release map R
rmap = cmvc_release_map opt.rel

if git_branch_not_descendent_of "integrated" # git merge-base might work here (one or the other is matched)

   # dev branch is not a descendent of current level
   # merge dev (-s ours) with latest level from git
   git_merge_ours_no_commit "integrated"

   # update the release map R:
   # find files that are no longer 'updated' given the latest level, and remove
   # them from the 'updated' list. this will prevent double-extractions
   lmap = cmvc_level_map opt.rel
   rmap = update_release_map rmap, lmap

end

# walk R, pulling in changes from CMVC
cmvc_extract_changed rmap

# write release map
write_rmap rmap

# commit new dev branch and push our repo up
git_push if git_commit_all


