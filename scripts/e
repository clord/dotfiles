#!/usr/bin/env ruby
#
# e -- The environment bundler
#
# I frequently need to tweak various environment variables before running certain programs
# or invoking makefiles built with a particular style. I don't like the bugs associated with
# accidental environment leakage causing unintended side-effects.
#
# Hence this script. It allows me to succinctly express a set of environment variables to use
# on a per-invocation basis. For example, suppose a particular makefile uses environment variables
# to control wether to build with asserts, and optimization, which platform to target, and a host
# of other ephemera. Rather than remember the exact incantation, I can describe the environment
# in a ruby class, and then do something like:
#
#    e bnd -- gmake -j20
#
# This will load theclass (by bnd), look up the environment to use, set the environment variables,
# and finally exec the part after the delimiter (--). leaving off the delimiter and command will spawn a
# shell with that environment, which is handy for making minor tweaks or extended sessions.

require 'lib/util'

# You'll have to provide your own work/environment (mine is secret)
require 'work/environment'

# Work came from work/environment, whose body is private. any compatible class defines three methods:
# process_sn, process_kv, and works_with. The three act as the adapter that lets this script
# call into them, causing the real work to be done,
ENVS = [Work.new]

def expand_parm(key, value, cmd)
   found = false
   ENVS.each do |e|
      if e.works_with(key)
         found ||= true
         yield e.process_kv(key, value, cmd)
      end
   end
   yield [cmd, {key.to_sym => value}] unless found
end


def expand(env, cmd)
   found = false
   ENVS.each do |e|
      if e.works_with(env)
         found ||= true
         yield e.process_sn(env, cmd)
      end
   end
   yield [cmd, {}] unless found
end

# Given an environment and a command array, produce a new
# environment and command array. this mechanism lets us
# shove things in, provide defaults, and so on
def filter_command(envs, cmd)
   new_env = {}
   new_cmd = []
   envs.each do |env|
      case env
      when /=/
         k,v = env.split(/\s*=\s*/, 2)
         expand_parm(k,v,cmd) {|c, ae| new_env.update(ae); new_cmd = c }
      else
         expand(env,cmd) {|c, ae| new_env.update(ae); new_cmd = c }
      end
   end
   [cmd, new_env]
end

# Given the set of env strings, set various environment variables.
# Note that these can be set directly on the command line, too. but typically
# you'd create a filter in the above function that expands to the desired
# environment
def construct_environment(envs)
   envs.each do |key, value|
      if value
         value = value.to_s
         value = nil if value.length == 0
      end
      ENV[key.to_s] = value
   end
end


# Split the input command line into the pre/post parts
# once found, keep returning true
found = false
post, pre = ARGV.partition { |a| found ||= /^\s*-+\s*$/.match(a) }

# remove delimiter from end
post.shift

# Pre-process the command line
cmd, env = filter_command(pre, post)

# construct the environment based on the user supplied string
construct_environment env

# Set an environment variable so that the nested process can
# know that it is nested. Perhaps to set a custom prompt, or
# to complain biterly.
ENV['E_NEST'] ||= "0"
ENV['E_NEST'] = (ENV['E_NEST'].to_i + 1).to_s

if cmd && cmd.count > 0
   # If there is a command, we'll run it under the current environment.
   exec *cmd
else
   # If there is no command, start a new shell with the new environment.
   exec "zsh"
end


